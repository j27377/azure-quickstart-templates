{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "String",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "sshPublicKey": {
      "type": "String",
      "metadata": {
        "description": "Configure all linux machines with the SSH public key string.  Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    },
    "devopsDnsPrefix": {
      "type": "String",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the combined Jenkins and Spinnaker Virtual Machine."
      }
    },
    "servicePrincipalAppId": {
      "type": "String",
      "metadata": {
        "description": "Service Principal App ID (also called Client ID) that has contributor rights to the subscription used for this deployment. It is used by the Kubernetes cluster to dynamically manage resources (e.g. user-defined load balancers)."
      }
    },
    "servicePrincipalAppKey": {
      "type": "SecureString",
      "metadata": {
        "description": "Service Principal App Key (also called Client Secret) that has contributor rights to the subscription used for this deployment. It is used by the Kubernetes cluster to dynamically manage resources (e.g. user-defined load balancers)."
      }
    },
    "gitRepository": {
      "defaultValue": "https://github.com/azure-devops/spin-kub-demo.git",
      "type": "String",
      "metadata": {
        "description": "The URL to a public git repository used for the default Jenkins job. It must include a Dockerfile at the root of the repo."
      }
    },
    "dockerRepository": {
      "defaultValue": "azure-devops/spin-kub-demo",
      "type": "String",
      "metadata": {
        "description": "The repository name used by the default Jenkins job and Spinnaker pipeline. This repository will be created in your Azure Container Registry."
      }
    },
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "type": "String",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "resourcePrefix": "devopaul",
    "storageAccountName": "[concat(variables('resourcePrefix'), uniquestring(resourceGroup().id))]",
    "acrStorageAccountName": "[concat('registry', uniqueString(resourceGroup().id))]",
    "acrName": "[uniqueString(resourceGroup().id)]",
    "nicName": "[concat(variables('resourcePrefix'), 'VMNic')]",
    "subnetName": "[concat(variables('resourcePrefix'), 'Subnet')]",
    "publicIPAddressName": "[concat(variables('resourcePrefix'), 'PublicIP')]",
    "vmName": "[concat(variables('resourcePrefix'), 'VM')]",
    "virtualNetworkName": "[concat(variables('resourcePrefix'), 'VNET')]",
    "vmExtensionName": "[concat(variables('resourcePrefix'), 'Init')]",
    "frontEndNSGName": "[concat(variables('resourcePrefix'), 'NSG')]",
    "kubernetesName": "[concat('containerservice-', resourceGroup().name)]",
    "kubernetesDnsPrefix": "[concat('k8s', uniquestring(resourceGroup().id))]",
    "pipelinePort": "8000",
    "_artifactsLocation": "https://raw.githubusercontent.com/Azure/azure-devops-utils/v0.24.0/",
    "_extensionScript": "301-jenkins-acr-spinnaker-k8s.sh",
    "_artifactsLocationSasToken": ""
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2016-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2016-01-01",
      "name": "[variables('acrStorageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2019-12-01-preview",
      "name": "[variables('acrName')]",
      "location": "centralus",
      "tags": {
        "deployment": "spinnaker"
      },
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "properties": {
        "adminUserEnabled": false,
        "policies": {
          "quarantinePolicy": {
            "status": "disabled"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "disabled"
          },
          "retentionPolicy": {
            "days": 7,
            "status": "disabled"
          }
        },
        "encryption": {
          "status": "disabled"
        },
        "dataEndpointEnabled": false,
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2016-09-01",
      "name": "[variables('publicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('devopsDnsPrefix')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2015-06-15",
      "name": "[variables('frontEndNSGName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "NSG - Front End"
      },
      "properties": {
        "securityRules": [
          {
            "name": "ssh-rule",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "http-rule",
            "properties": {
              "description": "Allow HTTP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 101,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2016-09-01",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('frontEndNSGName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('frontEndNSGName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2016-09-01",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')),'/subnets/',variables('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2017-03-30",
      "name": "[variables('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D1_v2"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                  "keyData": "[parameters('sshPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "14.04.5-LTS",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmName'),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "extensions",
          "apiVersion": "2015-06-15",
          "name": "[variables('vmExtensionName')]",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
            "[resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))]",
            "[resourceId('Microsoft.ContainerService/containerServices', variables('kubernetesName'))]"
          ],
          "properties": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(variables('_artifactsLocation'), 'quickstart_template/', variables('_extensionScript'), variables('_artifactsLocationSasToken'))]"
              ]
            },
            "protectedSettings": {
              "commandToExecute": "[concat('./', variables('_extensionScript'), ' -ai \"', parameters('servicePrincipalAppId'), '\" -ak \"', parameters('servicePrincipalAppKey'), '\" -si \"', subscription().subscriptionId, '\" -ti \"', subscription().tenantId, '\" -un \"', parameters('adminUsername'), '\" -gr \"', parameters('gitRepository') , '\" -rg \"', resourceGroup().name, '\" -mf \"', reference(resourceId('Microsoft.ContainerService/containerServices', variables('kubernetesName'))).masterProfile.fqdn, '\" -san \"', variables('storageAccountName'), '\" -sak \"', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2016-01-01').keys[0].value, '\" -acr \"', reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))).loginServer, '\" -dr \"', parameters('dockerRepository') , '\" -pp \"', variables('pipelinePort'),'\" -jf \"', reference(variables('publicIPAddressName')).dnsSettings.fqdn, '\" -al \"', variables('_artifactsLocation'), '\" -st \"', variables('_artifactsLocationSasToken'), '\"')]"
            }
          }
        }
      ]
    },
    {
      "name": "[variables('kubernetesName')]",
      "location": "[parameters('location')]",
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2020-03-01",
      "tags": {},
      "properties": {
        "kubernetesVersion": "1.16.13",
        "dnsPrefix": "string",
        "agentPoolProfiles": [
          {
            "name": "agentpools",
            "count": 1,
            "vmSize": "Standard_DS11_v2",
            "dnsPrefix": "[concat(variables('kubernetesDnsPrefix'),'agents')]"
          }
        ],
        "masterProfile": {
          "count": 1,
          "dnsPrefix": "[concat(variables('kubernetesDnsPrefix'),'mgmt')]"
        },
        "linuxProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshPublicKey')]"
              }
            ]
          }
        },
        "servicePrincipalProfile": {
          "ClientId": "[parameters('servicePrincipalAppId')]",
          "Secret": "[parameters('servicePrincipalAppKey')]"
        },
        "windowsProfile": {
          "adminUsername": "string",
          "adminPassword": "string"
        },
        "servicePrincipalProfile": {
          "clientId": "string",
          "secret": "string"
        },
        "addonProfiles": {},
        "nodeResourceGroup": "string",
        "enableRBAC": "boolean",
        "enablePodSecurityPolicy": "boolean",
        "networkProfile": {
          "networkPlugin": "string",
          "networkPolicy": "string",
          "networkMode": "string",
          "podCidr": "string",
          "serviceCidr": "string",
          "dnsServiceIP": "string",
          "dockerBridgeCidr": "string",
          "outboundType": "string",
          "loadBalancerSku": "string",
          "loadBalancerProfile": {
            "managedOutboundIPs": {
              "count": "integer"
            },
            "outboundIPPrefixes": {
              "publicIPPrefixes": [
                {
                  "id": "string"
                }
              ]
            },
            "outboundIPs": {
              "publicIPs": [
                {
                  "id": "string"
                }
              ]
            },
            "effectiveOutboundIPs": [
              {
                "id": "string"
              }
            ],
            "allocatedOutboundPorts": "integer",
            "idleTimeoutInMinutes": "integer"
          }
        },
        "aadProfile": {
          "managed": "boolean",
          "adminGroupObjectIDs": [
            "string"
          ],
          "clientAppID": "string",
          "serverAppID": "string",
          "serverAppSecret": "string",
          "tenantID": "string"
        },
        "autoScalerProfile": {
          "balance-similar-node-groups": "string",
          "scan-interval": "string",
          "scale-down-delay-after-add": "string",
          "scale-down-delay-after-delete": "string",
          "scale-down-delay-after-failure": "string",
          "scale-down-unneeded-time": "string",
          "scale-down-unready-time": "string",
          "scale-down-utilization-threshold": "string",
          "max-graceful-termination-sec": "string"
        },
        "apiServerAccessProfile": {
          "authorizedIPRanges": [
            "string"
          ],
          "enablePrivateCluster": "boolean"
        },
        "diskEncryptionSetID": "string",
        "identityProfile": {}
      },
      "identity": {
        "type": "string"
      },
      "sku": {
        "name": "Basic",
        "tier": "string"
      },
      "resources": []
    }
  ],
  "outputs": {
    "devopsVmFQDN": {
      "type": "String",
      "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
    },
    "jenkinsURL": {
      "type": "String",
      "value": "[concat('http://', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
    },
    "SSH": {
      "type": "String",
      "value": "[concat('ssh -L 8080:localhost:8080 -L 9000:localhost:9000 -L 8084:localhost:8084 -L 8001:localhost:8001 ', parameters('adminUsername'), '@', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
    },
    "azureContainerRegistryUrl": {
      "type": "String",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', variables('acrName'))).loginServer]"
    },
    "kubernetesMasterFQDN": {
      "type": "String",
      "value": "[reference(resourceId('Microsoft.ContainerService/containerServices', variables('kubernetesName'))).masterProfile.fqdn]"
    },
    "kubernetesMasterSsh": {
      "type": "String",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(resourceId('Microsoft.ContainerService/containerServices', variables('kubernetesName'))).masterProfile.fqdn)]"
    }
  }
}